<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Service - Main Page</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
    }
    .container {
      max-width: 800px;
      margin-top: 50px;
    }
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }
    .form-section {
      display: none;
    }
    .form-section.active {
      display: block;
    }
    .btn-toggle {
      margin: 0 5px;
    }
    .address-list {
      margin-top: 20px;
    }
    .address-item {
      padding: 10px;
      border-bottom: 1px solid #dee2e6;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-center mb-4">Welcome, <%= user.name %>!</h1>

    <!-- Message Display -->
    <% if (message) { %>
      <div class="alert alert-info" role="alert">
        <%= message %>
      </div>
    <% } %>

    <!-- Toggle Buttons for Sections -->
    <div class="text-center mb-4">
      <button class="btn btn-primary btn-toggle" onclick="showSection('profile')">Profile Management</button>
      <button class="btn btn-primary btn-toggle" onclick="showSection('address')">Address Management</button>
      <button class="btn btn-danger" onclick="logout()">Logout</button>
    </div>

    <!-- Profile Management Section -->
    <div id="profile-section" class="form-section card p-4">
      <h3>Profile Management</h3>
      <form id="profileForm" onsubmit="updateProfile(event)">
        <div class="mb-3">
          <label for="profileName" class="form-label">Name</label>
          <input type="text" class="form-control" id="profileName" name="name" value="<%= user.name %>" required>
        </div>
        <div class="mb-3">
          <label for="profileEmail" class="form-label">Email (cannot be changed)</label>
          <input type="email" class="form-control" id="profileEmail" value="<%= user.email %>" disabled>
        </div>
        <button type="submit" class="btn btn-success">Update Profile</button>
      </form>
    </div>

    <!-- Address Management Section -->
    <div id="address-section" class="form-section card p-4">
      <h3>Address Management</h3>
      <!-- Add Address Form -->
      <form id="addAddressForm" onsubmit="addAddress(event)" class="mb-4">
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="addressStreet" class="form-label">Street</label>
            <input type="text" class="form-control" id="addressStreet" name="street" required>
          </div>
          <div class="col-md-6 mb-3">
            <label for="addressCity" class="form-label">City</label>
            <input type="text" class="form-control" id="addressCity" name="city" required>
          </div>
        </div>
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="addressZipCode" class="form-label">Zip Code</label>
            <input type="text" class="form-control" id="addressZipCode" name="zipCode" required>
          </div>
          <div class="col-md-6 mb-3">
            <label for="addressCountry" class="form-label">Country</label>
            <input type="text" class="form-control" id="addressCountry" name="country" required>
          </div>
        </div>
        <button type="submit" class="btn btn-success">Add Address</button>
      </form>

      <!-- Address List -->
      <div class="address-list">
        <h4>Your Addresses</h4>
        <% if (user.addresses && user.addresses.length > 0) { %>
          <% user.addresses.forEach((address, index) => { %>
            <div class="address-item" id="address-<%= index %>">
              <p><strong>Address <%= index + 1 %>:</strong> <%= address.street %>, <%= address.city %>, <%= address.zipCode %>, <%= address.country %></p>
              <button class="btn btn-primary btn-sm me-2" onclick="editAddress(<%= index %>)">Edit</button>
              <button class="btn btn-danger btn-sm" onclick="deleteAddress(<%= index %>)">Delete</button>
              <!-- Edit Address Form (hidden by default) -->
              <form id="editAddressForm-<%= index %>" class="edit-address-form mt-2" onsubmit="updateAddress(event, <%= index %>)" style="display: none;">
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="editAddressStreet-<%= index %>" class="form-label">Street</label>
                    <input type="text" class="form-control" id="editAddressStreet-<%= index %>" name="street" value="<%= address.street %>" required>
                  </div>
                  <div class="col-md-6 mb-3">
                    <label for="editAddressCity-<%= index %>" class="form-label">City</label>
                    <input type="text" class="form-control" id="editAddressCity-<%= index %>" name="city" value="<%= address.city %>" required>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="editAddressZipCode-<%= index %>" class="form-label">Zip Code</label>
                    <input type="text" class="form-control" id="editAddressZipCode-<%= index %>" name="zipCode" value="<%= address.zipCode %>" required>
                  </div>
                  <div class="col-md-6 mb-3">
                    <label for="editAddressCountry-<%= index %>" class="form-label">Country</label>
                    <input type="text" class="form-control" id="editAddressCountry-<%= index %>" name="country" value="<%= address.country %>" required>
                  </div>
                </div>
                <button type="submit" class="btn btn-success btn-sm">Save Changes</button>
                <button type="button" class="btn btn-secondary btn-sm" onclick="cancelEdit(<%= index %>)">Cancel</button>
              </form>
            </div>
          <% }) %>
        <% } else { %>
          <p>No addresses found.</p>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS and Custom JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const token = localStorage.getItem('token');

    // Toggle between sections
    function showSection(sectionId) {
      console.log(`[UI] Switching to section: ${sectionId}`);
      const sections = document.querySelectorAll('.form-section');
      sections.forEach(section => section.classList.remove('active'));
      document.getElementById(`${sectionId}-section`).classList.add('active');
    }

    // Show profile section by default
    showSection('profile');

    // Handle profile update
    async function updateProfile(event) {
      event.preventDefault();
      const form = event.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      console.log('[Profile] Updating profile with data:', data);
      try {
        const response = await fetch('/api/user/profile', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (response.ok) {
          console.log('[Profile] Profile updated successfully:', result);
          alert('Profile updated successfully!');
          window.location.reload();
        } else {
          console.error('[Profile] Profile update failed:', result.error);
          alert(result.error || 'Failed to update profile');
        }
      } catch (error) {
        console.error('[Profile] Profile update error:', error.message);
        alert('Error: ' + error.message);
      }
    }

    // Handle add address
    async function addAddress(event) {
      event.preventDefault();
      const form = event.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      console.log('[Address] Adding new address with data:', data);
      try {
        const response = await fetch('/api/user/address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (response.ok) {
          console.log('[Address] Address added successfully:', result);
          alert('Address added successfully!');
          window.location.reload();
        } else {
          console.error('[Address] Address addition failed:', result.error);
          alert(result.error || 'Failed to add address');
        }
      } catch (error) {
        console.error('[Address] Address addition error:', error.message);
        alert('Error: ' + error.message);
      }
    }

    // Handle edit address form visibility
    function editAddress(index) {
      console.log(`[Address] Opening edit form for address at index: ${index}`);
      document.getElementById(`editAddressForm-${index}`).style.display = 'block';
    }

    // Cancel edit
    function cancelEdit(index) {
      console.log(`[Address] Canceling edit for address at index: ${index}`);
      document.getElementById(`editAddressForm-${index}`).style.display = 'none';
    }

    // Handle address update
    async function updateAddress(event, index) {
      event.preventDefault();
      const form = event.target;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      console.log(`[Address] Updating address at index ${index} with data:`, data);
      try {
        const response = await fetch(`/api/user/address/${index}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (response.ok) {
          console.log('[Address] Address updated successfully:', result);
          alert('Address updated successfully!');
          window.location.reload();
        } else {
          console.error('[Address] Address update failed:', result.error);
          alert(result.error || 'Failed to update address');
        }
      } catch (error) {
        console.error('[Address] Address update error:', error.message);
        alert('Error: ' + error.message);
      }
    }

    // Handle delete address
    async function deleteAddress(index) {
      console.log(`[Address] Initiating deletion of address at index: ${index}`);
      if (confirm('Are you sure you want to delete this address?')) {
        try {
          const response = await fetch(`/api/user/address/${index}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`,
            },
          });
          const result = await response.json();
          if (response.ok) {
            console.log('[Address] Address deleted successfully:', result);
            alert('Address deleted successfully!');
            window.location.reload();
          } else {
            console.error('[Address] Address deletion failed:', result.error);
            alert(result.error || 'Failed to delete address');
          }
        } catch (error) {
          console.error('[Address] Address deletion error:', error.message);
          alert('Error: ' + error.message);
        }
      } else {
        console.log('[Address] Address deletion canceled by user');
      }
    }

    // Handle logout
    function logout() {
      console.log('[User] Logging out user');
      localStorage.removeItem('token');
      window.location.href = '/';
    }
  </script>
</body>
</html>