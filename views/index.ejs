<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Service - Authentication Test</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
    }
    .container {
      max-width: 800px;
      margin-top: 50px;
    }
    .card {
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .form-section {
      display: none;
    }
    .form-section.active {
      display: block;
    }
    .btn-toggle {
      margin: 0 5px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-center mb-4">User Service - Authentication Test</h1>

    <!-- Toggle Buttons for Forms -->
    <div class="text-center mb-4">
      <button class="btn btn-primary btn-toggle" onclick="showForm('register')">Register</button>
      <button class="btn btn-primary btn-toggle" onclick="showForm('login')">Login</button>
    </div>

    <!-- Message Display -->
    <% if (message) { %>
      <div class="alert alert-info" role="alert">
        <%= message %>
      </div>
    <% } %>

    <!-- User Profile (after login) -->
    <% if (user) { %>
      <div class="card p-4 mb-4">
        <h3>Welcome, <%= user.name %>!</h3>
        <p><strong>Email:</strong> <%= user.email %></p>
        <button class="btn btn-danger" onclick="logout()">Logout</button>
      </div>
    <% } %>

    <!-- Registration Form -->
    <div id="register-form" class="form-section card p-4 mb-4">
      <h3>Register</h3>
      <form id="registerForm">
        <div class="mb-3">
          <label for="registerName" class="form-label">Name</label>
          <input type="text" class="form-control" id="registerName" name="name" required>
        </div>
        <div class="mb-3">
          <label for="registerEmail" class="form-label">Email</label>
          <input type="email" class="form-control" id="registerEmail" name="email" required>
        </div>
        <div class="mb-3">
          <label for="registerPassword" class="form-label">Password</label>
          <input type="password" class="form-control" id="registerPassword" name="password" required>
        </div>
        <button type="submit" class="btn btn-success">Register</button>
      </form>
    </div>

    <!-- Login Form -->
    <div id="login-form" class="form-section card p-4 mb-4">
      <h3>Login</h3>
      <form id="loginForm">
        <div class="mb-3">
          <label for="loginEmail" class="form-label">Email</label>
          <input type="email" class="form-control" id="loginEmail" name="email" required>
        </div>
        <div class="mb-3">
          <label for="loginPassword" class="form-label">Password</label>
          <input type="password" class="form-control" id="loginPassword" name="password" required>
        </div>
        <button type="submit" class="btn btn-success">Login</button>
      </form>
    </div>
  </div>

  <!-- Bootstrap JS and Custom JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Toggle between forms
    function showForm(formId) {
      console.log(`[UI] Switching to form: ${formId}`);
      document.querySelectorAll('.form-section').forEach(form => {
        form.classList.remove('active');
      });
      document.getElementById(`${formId}-form`).classList.add('active');
    }

    // Show register form by default
    showForm('register');

    // Handle registration
    document.getElementById('registerForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      console.log('[Auth] Registering user with data:', data);
      try {
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (response.ok) {
          console.log('[Auth] Registration successful:', result);
          alert('Registration successful! Please login.');
          showForm('login');
        } else {
          console.error('[Auth] Registration failed:', result.error);
          alert(result.error || 'Registration failed');
        }
      } catch (error) {
        console.error('[Auth] Registration error:', error.message);
        alert('Error: ' + error.message);
      }
    });

    // Handle login
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      console.log('[Auth] Logging in user with data:', data);
      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (response.ok) {
          console.log('[Auth] Login successful, redirecting to:', result.redirect);
          localStorage.setItem('token', result.token);
          window.location.href = result.redirect;
        } else {
          console.error('[Auth] Login failed:', result.error);
          alert(result.error || 'Login failed');
        }
      } catch (error) {
        console.error('[Auth] Login error:', error.message);
        alert('Error: ' + error.message);
      }
    });

    // Handle logout
    function logout() {
      console.log('[Auth] Logging out user');
      localStorage.removeItem('token');
      window.location.reload();
    }

    // Check if user is logged in on page load
    window.onload = async () => {
      const token = localStorage.getItem('token');
      if (token) {
        console.log('[Auth] Checking if user is already logged in');
        try {
          const response = await fetch('/api/user/profile', {
            headers: { 'Authorization': `Bearer ${token}` },
          });
          const user = await response.json();
          if (response.ok) {
            console.log('[Auth] User is logged in, redirecting to main page');
            window.location.href = `/main?token=${token}`;
          } else {
            console.log('[Auth] Invalid token, clearing localStorage');
            localStorage.removeItem('token');
          }
        } catch (error) {
          console.error('[Auth] Error checking user status:', error.message);
          localStorage.removeItem('token');
        }
      }
    };
  </script>
</body>
</html>